{"version":3,"file":"static/js/497.abacd139.chunk.js","mappings":"mSAGaA,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,MAAPD,CAAH,2HAOLE,EAAYF,EAAAA,EAAAA,OAAH,mcAmBTG,EAAYH,EAAAA,EAAAA,MAAH,6HAWTI,GAJYJ,EAAAA,EAAAA,EAAH,yCAICA,EAAAA,EAAAA,IAAH,qHAOPK,EAAaL,EAAAA,EAAAA,IAAH,uJ,mBCrCjBM,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,QAAQ,yHAA8D,mBACtEC,SAAS,oBACZC,OAAQL,EAAAA,KAELG,QAAQ,+EAAgF,2BACxFC,SAAS,8BAGRE,EAAe,CACnBJ,KAAM,GACNG,OAAQ,IAqEV,EAlEoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,KAE7BC,EAAAA,EAAAA,YAAU,WACRC,OAAOC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUR,GACxD,GAAE,CAACA,IA0BJ,OACE,SAAC,EAAAS,OAAD,CAAQC,cAAeb,EAAcc,iBAAkBrB,EAAQsB,SAzBxC,SAACC,EAAD,GAAgC,IAAjBC,EAAgB,EAAhBA,UAChCC,EAAwBf,EAASgB,MACrC,SAACC,GAAD,OAAaA,EAAQxB,KAAKyB,gBAAkBL,EAAWpB,KAAKyB,aAA5D,IAGIC,EAA0BnB,EAASgB,MACvC,SAACC,GAAD,OAAaA,EAAQrB,SAAWiB,EAAWjB,MAA3C,IAGEmB,EACFK,EAAAA,GAAAA,MAAY,4CAIVD,EACFC,EAAAA,GAAAA,MAAY,+CAIdtB,GAASuB,EAAAA,EAAAA,IAAWR,IAEpBC,IACD,EAGC,UACE,SAAC,EAAAQ,KAAD,CAAMC,aAAa,MAAnB,UACE,UAAClC,EAAD,YACA,UAACD,EAAD,YACE,UAACD,EAAD,WAAW,+BAET,SAACJ,EAAD,CACEyC,KAAK,OACL/B,KAAK,OACLgC,MAAM,yIACN9B,UAAQ,QAGZ,UAACR,EAAD,WAAW,gBAET,SAACJ,EAAD,CACEyC,KAAK,MACL/B,KAAK,SACLgC,MAAM,+FACN9B,UAAQ,WAId,UAACT,EAAD,CAAWsC,KAAK,SAAhB,WACI,SAAC,MAAD,IAAsB,uBAOjC,C,8ICtFYE,EAAkB,SAAAC,GAAK,OAAIA,EAAM3B,SAASA,SAAS4B,SAA5B,EAEvBC,EAAc,SAAAF,GAAK,OAAIA,EAAM3B,SAASA,SAAS8B,KAA5B,EAEnBC,EAAgB,SAAAJ,GAAK,OAAIA,EAAM3B,SAASgC,MAAnB,EAErB9B,GAAwB+B,EAAAA,EAAAA,IACnC,CAT4B,SAAAN,GAAK,OAAIA,EAAM3B,SAASA,SAASkC,KAA5B,EAShBH,IACjB,SAAC/B,EAAUgC,GACT,OAAOhC,EAASgC,QAAO,SAACf,GAAD,OACrBA,EAAQxB,KAAKyB,cAAciB,SAASH,EAAOd,cADtB,GAGxB,G","sources":["components/FormContact/FormContact.styled.jsx","components/FormContact/FormContact.jsx","redux/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n    padding: 5px;\n    width: 200px;\n    border: 2px solid greenyellow;\n    border-radius: 5px;\n`;\n\nexport const ButtonAdd = styled.button`\n    display: flex;\n    gap: 5px;\n    background-color: rgb(38 209 135);\n    color: #6d2b65;\n    border: 3px solid rgb(30 159 139);\n    border-radius: 20px;\n    padding: 5px 20px;\n    font-size: 18px;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    &:hover, &:focus {\n        background-color: rgb(30 159 139);\n        border: 3px solid rgb(38 209 135);\n        color: #fff;\n    }\n`;\n\nexport const LabelForm = styled.label`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin-bottom: 10px;\n`;\n\nexport const ErrorText = styled.p`\n    color: red;\n`;\n\nexport const FormBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n`;\n\nexport const BigBoxForm = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { addContact } from '../../redux/contactsOperations';\nimport { selectVisibleContacts } from '../../redux/selectors';\nimport { Input, ButtonAdd, LabelForm, FormBox, BigBoxForm } from './FormContact.styled';\nimport { PiAddressBookLight } from 'react-icons/pi';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Name is invalid')\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(/^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/, 'Phone number is invalid')\n    .required('Phone number is required'),\n});\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nconst FormContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleFormSubmit = (newContact, { resetForm }) => {\n    const existingContactByName = contacts.find(\n      (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    const existingContactByNumber = contacts.find(\n      (contact) => contact.number === newContact.number\n    );\n\n    if (existingContactByName) {\n      toast.error('A contact with this name already exists!');\n      return;\n    }\n\n    if (existingContactByNumber) {\n      toast.error('A contact with this number already exists!');\n      return;\n    }\n\n    dispatch(addContact(newContact));\n\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValue} validationSchema={schema} onSubmit={handleFormSubmit}>\n      <Form autoComplete='off'>\n        <BigBoxForm>\n        <FormBox>\n          <LabelForm>\n            The name of the new contact\n            <Input\n              type='text'\n              name='name'\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </LabelForm>\n          <LabelForm>\n            Phone number\n            <Input\n              type='tel'\n              name='number'\n              title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n              required\n            />\n          </LabelForm>\n        </FormBox>\n        <ButtonAdd type='submit'>\n            <PiAddressBookLight />\n            Add contact\n          </ButtonAdd>\n        </BigBoxForm>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default FormContact;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilters = state => state.contacts.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);"],"names":["Input","styled","Field","ButtonAdd","LabelForm","FormBox","BigBoxForm","schema","yup","shape","name","matches","required","number","initialValue","dispatch","useDispatch","contacts","useSelector","selectVisibleContacts","useEffect","window","localStorage","setItem","JSON","stringify","Formik","initialValues","validationSchema","onSubmit","newContact","resetForm","existingContactByName","find","contact","toLowerCase","existingContactByNumber","toast","addContact","Form","autoComplete","type","title","selectIsLoading","state","isLoading","selectError","error","selectFilters","filter","createSelector","items","includes"],"sourceRoot":""}