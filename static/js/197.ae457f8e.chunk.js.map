{"version":3,"file":"static/js/197.ae457f8e.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/ContactsList.styled.jsx","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/FormContact/FormContact.styled.jsx","components/FormContact/FormContact.jsx","page/Phonebook/Phonebook.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilters = state => state.contacts.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n    list-style-type: none;\n    padding: 0;\n    margin: 0 auto;\n\n    max-width: 800px;\n    border: 1px solid greenyellow;\n`;\n\nexport const ContactItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px;\n    border-bottom: 1px solid #ccc;\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nexport const RemoveBtn = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    background-color: #fff;\n    color: #e31c5f;\n    border: 1px solid #e31c5f;\n    border-radius: 5px;\n    padding: 5px 15px;\n    font-size: 20px;\n    cursor: pointer;\n    &:hover, &:focus {\n        background-color: #e31c5f;\n        color: #fff;\n    }\n`;\n\nexport const DataContacts = styled.span`\n    font-size: 20px;\n    font-weight: 500;\n    color: #3f3030;\n`;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContact, fetchContacts } from '../../redux/contactsOperations';\nimport { selectError, selectIsLoading, selectVisibleContacts } from '../../redux/selectors';\nimport toast from 'react-hot-toast';\nimport { ContactsList, ContactItem, RemoveBtn, DataContacts } from './ContactsList.styled';\nimport Loader from 'components/Loader';\nimport { MdDeleteForever } from 'react-icons/md';\nimport { FcTwoSmartphones } from 'react-icons/fc';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const loading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const handleRemoveContact = (id) => {\n    dispatch(removeContact(id));\n    toast.success('Contact deleted successfully!');\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {error && <p>{error}</p>}\n      {visibleContacts.length > 0 ? (\n        <ContactsList>\n          {visibleContacts.map(({ name, number, id }) => (\n            <ContactItem key={id}>\n              <FcTwoSmartphones size={40}/> <DataContacts>{name}: {number}</DataContacts>\n              <RemoveBtn type='button' onClick={() => handleRemoveContact(id)}>\n                <MdDeleteForever />\n                Remove\n              </RemoveBtn>\n            </ContactItem>\n          ))}\n        </ContactsList>\n      ) : (\n        <p>No contacts found.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const LabelFilter = styled.label`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 30px;\n    margin-bottom: 10px;\n`;\n\nexport const InputFilter = styled.input`\n    padding: 5px;\n    border: 2px solid greenyellow;\n    border-radius: 5px;\n`;","import React from \"react\";\nimport { LabelFilter, InputFilter } from \"./FilterContacts.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilters } from \"redux/selectors\";\nimport { changedFilter } from \"redux/filterSlice\";\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilters);\n\n  return (\n    <LabelFilter>\n      Filter\n      <InputFilter\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        onChange={evt => dispatch(changedFilter(evt.target.value.trim()))} \n      />\n    </LabelFilter>\n  );\n};\n\nexport default FilterContacts;","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n    padding: 5px;\n    width: 200px;\n    border: 2px solid greenyellow;\n    border-radius: 5px;\n`;\n\nexport const ButtonAdd = styled.button`\n    display: flex;\n    gap: 5px;\n    background-color: rgb(38 209 135);\n    color: #6d2b65;\n    border: 3px solid rgb(30 159 139);\n    border-radius: 20px;\n    padding: 5px 20px;\n    font-size: 18px;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    &:hover, &:focus {\n        background-color: rgb(30 159 139);\n        border: 3px solid rgb(38 209 135);\n        color: #fff;\n    }\n`;\n\nexport const LabelForm = styled.label`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin-bottom: 10px;\n`;\n\nexport const ErrorText = styled.p`\n    color: red;\n`;\n\nexport const FormBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n`;\n\nexport const BigBoxForm = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { addContact } from '../../redux/contactsOperations';\nimport { selectVisibleContacts } from '../../redux/selectors';\nimport { Input, ButtonAdd, LabelForm, FormBox, BigBoxForm } from './FormContact.styled';\nimport { PiAddressBookLight } from 'react-icons/pi';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Name is invalid')\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(/^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/, 'Phone number is invalid')\n    .required('Phone number is required'),\n});\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nconst FormContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleFormSubmit = (newContact, { resetForm }) => {\n    const existingContactByName = contacts.find(\n      (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    const existingContactByNumber = contacts.find(\n      (contact) => contact.number === newContact.number\n    );\n\n    if (existingContactByName) {\n      toast.error('A contact with this name already exists!');\n      return;\n    }\n\n    if (existingContactByNumber) {\n      toast.error('A contact with this number already exists!');\n      return;\n    }\n\n    dispatch(addContact(newContact));\n\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValue} validationSchema={schema} onSubmit={handleFormSubmit}>\n      <Form autoComplete='off'>\n        <BigBoxForm>\n        <FormBox>\n          <LabelForm>\n            The name of the new contact\n            <Input\n              type='text'\n              name='name'\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </LabelForm>\n          <LabelForm>\n            Phone number\n            <Input\n              type='tel'\n              name='number'\n              title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n              required\n            />\n          </LabelForm>\n        </FormBox>\n        <ButtonAdd type='submit'>\n            <PiAddressBookLight />\n            Add contact\n          </ButtonAdd>\n        </BigBoxForm>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default FormContact;","import ContactList from 'components/ContactList';\nimport FilterContacts from 'components/FilterContacts';\nimport FormContact from 'components/FormContact';\n\n\nconst Phonebook = () => {\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <h2>Enter the data of the new contact</h2>\n            <FormContact />\n            <h2>Contacts list</h2>\n            <h3>You can use the search</h3> <FilterContacts />\n            <ContactList />\n        </div>\n    )\n}\n\nexport default Phonebook;"],"names":["selectIsLoading","state","contacts","isLoading","selectError","error","selectFilters","filter","selectVisibleContacts","createSelector","items","contact","name","toLowerCase","includes","ContactsList","styled","ContactItem","RemoveBtn","DataContacts","dispatch","useDispatch","visibleContacts","useSelector","loading","useEffect","fetchContacts","Loader","length","map","number","id","size","type","onClick","removeContact","toast","handleRemoveContact","LabelFilter","InputFilter","value","onChange","evt","changedFilter","target","trim","Input","Field","ButtonAdd","LabelForm","FormBox","BigBoxForm","schema","yup","shape","matches","required","initialValue","window","localStorage","setItem","JSON","stringify","initialValues","validationSchema","onSubmit","newContact","resetForm","existingContactByName","find","existingContactByNumber","addContact","autoComplete","title"],"sourceRoot":""}