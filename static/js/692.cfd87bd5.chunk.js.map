{"version":3,"file":"static/js/692.cfd87bd5.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.jsx","redux/selectors.js","components/ContactList/ContactsList.styled.jsx","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/FormContact/FormContact.styled.jsx","components/FormContact/FormContact.jsx","page/Phonebook/Phonebook.styled.jsx","page/Phonebook/Phonebook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage, Field } from \"formik\";\n\nexport const LabelText = styled.span`\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 8px;\n    margin-top: 8px;\n    font-size: 18px;\n    font-weight: 600;\n    color: #27874f;\n`;\n\nexport const FieldInput = styled(Field)`\n    font: inherit;\n    background-color: #c4f8af;\n    border: none;\n    border-bottom: 2px solid #27874f;\n    outline: none;\n    padding: theme.spacing(1); \n    padding-top: 25px;\n    padding-right: 12px;\n    padding-bottom: 8px;\n    padding-left: 12px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n`;\n\nexport const ContainerForm = styled.div`\n    margin: 0 auto;\n    max-width: 600px;\n    margin-bottom: 40px;\n    flex-direction: column;\n    border: 2px solid #27874f;\n    border-radius: 10px;\n    padding: 10px;\n`;\n\nexport const TitleForm = styled.h1`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    text-align: center;\n    font-weight: 700;\n    font-size: 40px;\n    color: #0b9448;\n    margin-bottom: 20px;\n    margin-top: 10px;\n`;\n\nexport const MessageError = styled(ErrorMessage)`\n    color: red;\n    font-size: 14px;\n    margin-top: 5px;\n`;\n\nexport const BoxBig = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    gap: 25px;\n`;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilters = state => state.contacts.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n    list-style-type: none;\n    padding: 0;\n    margin: 0 auto;\n\n    max-width: 600px;\n    border: 2px solid #27874f;\n    border-radius: 10px;\n    margin-bottom: 20px;\n`;\n\nexport const ContactItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px;\n    border-bottom: 1px solid #ccc;\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nexport const RemoveBtn = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    background-color: #fff;\n    color: #e31c5f;\n    border: 1px solid #e31c5f;\n    border-radius: 5px;\n    padding: 5px 15px;\n    font-size: 20px;\n    cursor: pointer;\n    &:hover, &:focus {\n        background-color: #e31c5f;\n        color: #fff;\n    }\n`;\n\nexport const DataContacts = styled.span`\n    font-size: 20px;\n    font-weight: 500;\n    color: #3f3030;\n`;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContact, fetchContacts } from '../../redux/contactsOperations';\nimport { selectError, selectIsLoading, selectVisibleContacts } from '../../redux/selectors';\nimport toast from 'react-hot-toast';\nimport { ContactsList, ContactItem, RemoveBtn, DataContacts } from './ContactsList.styled';\nimport Loader from 'components/Loader';\nimport { MdDeleteForever } from 'react-icons/md';\nimport { FcTwoSmartphones } from 'react-icons/fc';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const loading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const handleRemoveContact = (id) => {\n    dispatch(removeContact(id));\n    toast.success('Contact deleted successfully!');\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {error && <p>{error}</p>}\n      {visibleContacts.length > 0 ? (\n        <ContactsList>\n          {visibleContacts.map(({ name, number, id }) => (\n            <ContactItem key={id}>\n              <FcTwoSmartphones size={40}/> <DataContacts>{name}: {number}</DataContacts>\n              <RemoveBtn type='button' onClick={() => handleRemoveContact(id)}>\n                <MdDeleteForever />\n                Remove\n              </RemoveBtn>\n            </ContactItem>\n          ))}\n        </ContactsList>\n      ) : (\n        <p>No contacts found.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const LabelFilter = styled.label`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 30px;\n    margin-bottom: 40px;\n`;\n\nexport const InputFilter = styled.input`\n    font: inherit;\n    background-color: #c4f8af;\n    border: none;\n    border-bottom: 2px solid black;\n    outline: none;\n    padding: theme.spacing(1); \n    padding-top: 25px;\n    padding-right: 12px;\n    padding-bottom: 8px;\n    padding-left: 12px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n`;\n\nexport const LabelSpan = styled.span`\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 8px;\n    margin-top: 8px;\n    font-size: 25px;\n    font-weight: 600;\n    color: #27874f;\n`;","import React from \"react\";\nimport { LabelFilter, InputFilter, LabelSpan } from \"./FilterContacts.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilters } from \"redux/selectors\";\nimport { changedFilter } from \"redux/filterSlice\";\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilters);\n\n  return (\n    <LabelFilter>\n      <LabelSpan> <PersonSearchIcon /> Searching contact</LabelSpan>\n      <InputFilter\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        placeholder=\"Enter name contact\"\n        onChange={evt => dispatch(changedFilter(evt.target.value.trim()))} \n      />\n    </LabelFilter>\n  );\n};\n\nexport default FilterContacts;","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n    font: inherit;\n    background-color: #c4f8af;\n    border: none;\n    border-bottom: 2px solid black;\n    outline: none;\n    padding: theme.spacing(1); \n    padding-top: 25px;\n    padding-right: 12px;\n    padding-bottom: 8px;\n    padding-left: 12px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n`;\n\nexport const LabelForm = styled.label`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin-bottom: 10px;\n`;\n\nexport const ErrorText = styled.p`\n    color: red;\n`;\n\nexport const FormBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n`;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { addContact } from '../../redux/contactsOperations';\nimport { selectVisibleContacts } from '../../redux/selectors';\nimport { Input, LabelForm } from './FormContact.styled';\nimport { PiAddressBookLight } from 'react-icons/pi';\nimport { BoxBig, ContainerForm, LabelText } from 'components/RegisterForm/RegisterForm.styled';\nimport Button from '@mui/material/Button';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Name is invalid')\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(/^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/, 'Phone number is invalid')\n    .required('Phone number is required'),\n});\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nconst FormContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleFormSubmit = (newContact, { resetForm }) => {\n    const existingContactByName = contacts.find(\n      (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    const existingContactByNumber = contacts.find(\n      (contact) => contact.number === newContact.number\n    );\n\n    if (existingContactByName) {\n      toast.error('A contact with this name already exists!');\n      return;\n    }\n\n    if (existingContactByNumber) {\n      toast.error('A contact with this number already exists!');\n      return;\n    }\n\n    dispatch(addContact(newContact));\n\n    resetForm();\n  };\n\n  return (\n    <ContainerForm>\n      <Formik initialValues={initialValue} validationSchema={schema} onSubmit={handleFormSubmit}>\n        <Form autoComplete='off'>\n            <BoxBig>\n              <LabelForm>\n                <LabelText>The name of the new contact</LabelText>\n                <Input\n                  type='text'\n                  name='name'\n                  placeholder=\"Enter name new contact\" \n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                />\n              </LabelForm>\n              <LabelForm>\n                <LabelText>Phone number</LabelText>\n                <Input\n                  type='tel'\n                  name='number'\n                  placeholder=\"Enter phone number\" \n                  title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n                  required\n                />\n              </LabelForm>\n              <Button variant=\"contained\" color=\"success\" type=\"submit\" >\n                <PiAddressBookLight size={30} />\n                Add contact\n              </Button>\n            </BoxBig>\n        </Form>\n      </Formik>\n    </ContainerForm>\n  );\n};\n\nexport default FormContact;","import styled from '@emotion/styled';\n\nexport const TitleH2 = styled.h2`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    text-align: center;\n    font-weight: 600;\n    font-size: 30px;\n    color: #0b9448;\n    margin-bottom: 20px;\n`;","import ContactList from 'components/ContactList';\nimport FilterContacts from 'components/FilterContacts';\nimport FormContact from 'components/FormContact';\nimport { TitleForm } from 'components/RegisterForm/RegisterForm.styled';\nimport { TitleH2 } from './Phonebook.styled';\n\n\nconst Phonebook = () => {\n    return (\n        <div>\n            <TitleForm>Phonebook</TitleForm>\n            <TitleH2>Enter the data of the new contact</TitleH2>\n            <FormContact />\n            <TitleH2>Contacts list</TitleH2>\n            <FilterContacts />\n            <ContactList />\n        </div>\n    )\n}\n\nexport default Phonebook;"],"names":["LabelText","styled","FieldInput","Field","ContainerForm","TitleForm","BoxBig","ErrorMessage","selectIsLoading","state","contacts","isLoading","selectError","error","selectFilters","filter","selectVisibleContacts","createSelector","items","contact","name","toLowerCase","includes","ContactsList","ContactItem","RemoveBtn","DataContacts","dispatch","useDispatch","visibleContacts","useSelector","loading","useEffect","fetchContacts","Loader","length","map","number","id","size","type","onClick","removeContact","toast","handleRemoveContact","LabelFilter","InputFilter","LabelSpan","PersonSearch","value","placeholder","onChange","evt","changedFilter","target","trim","Input","LabelForm","schema","yup","shape","matches","required","initialValue","window","localStorage","setItem","JSON","stringify","initialValues","validationSchema","onSubmit","newContact","resetForm","existingContactByName","find","existingContactByNumber","addContact","autoComplete","title","Button","variant","color","TitleH2"],"sourceRoot":""}