{"version":3,"file":"static/js/707.55c6c8f3.chunk.js","mappings":"yPAMMA,EAAgB,CAClBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGRC,EAASC,EAAAA,KAAaC,MAAM,CAC9BL,KAAMI,EAAAA,KAELE,QAAQ,yHAA8D,mBACtEC,SAAS,oBACVN,MAAOG,EAAAA,KAAaE,QAAQ,6BAA8B,qBAAqBL,QAAQM,SAAS,sBAChGL,SAAUE,EAAAA,KAAaI,OAAO,GAAI,oBAAoBD,SAAS,0BAsCnE,EAlCqB,WACjB,IAAME,GAAWC,EAAAA,EAAAA,MAOjB,OACI,SAAC,KAAD,CAAQX,cAAeA,EAAeY,iBAAkBR,EAAQS,SAN/C,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC5BL,GAASM,EAAAA,EAAAA,IAASF,IAClBC,GACH,EAGG,UACI,UAAC,KAAD,CAAME,aAAa,MAAnB,WACI,8BACI,0BAAM,eACN,SAAC,KAAD,CAAOC,KAAK,OAAOjB,KAAK,OAAOkB,YAAY,oBAC3C,SAAC,KAAD,CAAclB,KAAK,OAAOmB,UAAU,YAExC,8BACI,0BAAM,0BACN,SAAC,KAAD,CAAOF,KAAK,QAAQjB,KAAK,QAAQkB,YAAY,0BAC7C,SAAC,KAAD,CAAclB,KAAK,QAAQmB,UAAU,YAEzC,8BACI,0BAAM,0BACN,SAAC,KAAD,CAAOF,KAAK,WAAWjB,KAAK,WAAWkB,YAAY,oBACnD,SAAC,KAAD,CAAclB,KAAK,WAAWmB,UAAU,YAE5C,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUL,KAAK,SAAjD,SAA2D,iBAM1E,EC1CD,EATqB,WACjB,OACI,4BACI,wBAAI,2BACJ,SAAC,EAAD,MAGX,C","sources":["components/RegisterForm/RegisterForm.jsx","page/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { register } from \"redux/auth/authOperations\";\nimport * as yup from 'yup';\nimport Button from '@mui/material/Button';\n\nconst initialValues = {\n    name: '',\n    email: '',\n    password: '',\n}\n\nconst schema = yup.object().shape({\n    name: yup\n    .string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Name is invalid')\n    .required('Name is required'),\n    email: yup.string().matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'E-mail is invalid').email().required('E-mail is required'),\n    password: yup.string().length(10, 'Enter 10 symbols').required('Password is required')\n});\n\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, { resetForm }) => {\n        dispatch(register(values));\n        resetForm();\n    }\n\n    return (\n        <Formik initialValues={initialValues} validationSchema={schema} onSubmit={handleSubmit} >\n            <Form autoComplete=\"off\">\n                <label>\n                    <span>Username:</span>\n                    <Field type=\"text\" name=\"name\" placeholder=\"Enter username\" />\n                    <ErrorMessage name=\"name\" component=\"div\" />\n                </label>\n                <label>\n                    <span>Your e-mail address:</span>\n                    <Field type=\"email\" name=\"email\" placeholder=\"Enter e-mail address\" />\n                    <ErrorMessage name=\"email\" component=\"div\" />\n                </label>\n                <label>\n                    <span>Enter your password:</span>\n                    <Field type=\"password\" name=\"password\" placeholder=\"Enter password\" />\n                    <ErrorMessage name=\"password\" component=\"div\" />\n                </label>\n                <Button variant=\"contained\" color=\"success\" type=\"submit\" >\n                    Register\n                </Button>\n            </Form>\n        </Formik>\n    )\n}\n\nexport default RegisterForm;","import RegisterForm from '../../components/RegisterForm/RegisterForm';\n\n\nconst RegisterPage = () => {\n    return(\n        <div>\n            <h1>Register your profile</h1>\n            <RegisterForm />\n        </div>\n    )\n};\n\nexport default RegisterPage;"],"names":["initialValues","name","email","password","schema","yup","shape","matches","required","length","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","register","autoComplete","type","placeholder","component","Button","variant","color"],"sourceRoot":""}